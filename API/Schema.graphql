scalar Date

schema {
  query: Query
  mutation: Mutation
}

type Query {
  recipes: [Recipe]!
  recipe(recipeId: String!): Recipe
  myRecipes: [Recipe]!
}

type Mutation {
  login(user: UserInput!): Token
  register(user: UserInput!): String
  newRecipe(recipe: RecipeInput): Boolean!
}

type Recipe {
  id: ID!
  name: String!
  photo: String
  description: String
  ingredients: [RecipeIngredient!]!
  steps: [String]!
  tags: [String]!
  times: [RecipeTime!]!
}

type RecipeTime {
  name: String!
  time: String!
}

type RecipeIngredient {
  ingredient: String!
  amount: Float!
  unit: String
}

type Pantry {
  id: ID!
  items: [PantryItem]!
}

type PantryItem {
  ingredient: String!
  amount: Float!
  unit: String
  expirationDate: Date
}

type User {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  claims: [String]
}

type Token {
  access: String!
  refresh: String!
}

input UserInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
}

input RecipeInput {
  name: String!
  photo: String
  description: String
  ingredients: [RecipeIngredientInput!]!
  steps: [String]!
  tags: [String]
  times: [RecipeTimeInput!]!
}

input RecipeIngredientInput {
  Ingredient: String!
  Amount: Float!
  Unit: String
}

input RecipeTimeInput {
  name: String!
  time: String!
}
